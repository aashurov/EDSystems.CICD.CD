// <auto-generated />
using System;
using EDSystems.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EDSystems.Persistence.Migrations
{
    [DbContext(typeof(EDSystemsDbContext))]
    [Migration("20230104080450_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EDSystems.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8688),
                            Name = "Валютный счет Москвы",
                            Number = "643840USD"
                        },
                        new
                        {
                            Id = 2,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8691),
                            Name = "Рублевый счет Москвы",
                            Number = "643643RUB"
                        },
                        new
                        {
                            Id = 3,
                            Balance = 0m,
                            BranchId = 2,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8693),
                            Name = "Валютный счет Ташкента",
                            Number = "860840USD"
                        },
                        new
                        {
                            Id = 4,
                            Balance = 0m,
                            BranchId = 2,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8694),
                            Name = "Рублевый счет Ташкента",
                            Number = "860643RUB"
                        },
                        new
                        {
                            Id = 5,
                            Balance = 0m,
                            BranchId = 3,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8696),
                            Name = "Валютный счет Бишкека",
                            Number = "417840USD"
                        },
                        new
                        {
                            Id = 6,
                            Balance = 0m,
                            BranchId = 3,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8697),
                            Name = "Рублевый счет Бишкека",
                            Number = "417643RUB"
                        },
                        new
                        {
                            Id = 7,
                            Balance = 0m,
                            BranchId = 4,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8698),
                            Name = "Валютный счет Душанбе",
                            Number = "972840USD"
                        },
                        new
                        {
                            Id = 8,
                            Balance = 0m,
                            BranchId = 4,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8699),
                            Name = "Рублевый счет Душанбе",
                            Number = "972843RUB"
                        },
                        new
                        {
                            Id = 9,
                            Balance = 0m,
                            BranchId = 5,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8700),
                            Name = "Валютный счет Алматы",
                            Number = "398840USD"
                        },
                        new
                        {
                            Id = 10,
                            Balance = 0m,
                            BranchId = 5,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8702),
                            Name = "Рублевый счет Алматы",
                            Number = "398643RUB"
                        },
                        new
                        {
                            Id = 11,
                            Balance = 0m,
                            BranchId = 6,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8703),
                            Name = "Валютный счет Стамбул",
                            Number = "792840USD"
                        },
                        new
                        {
                            Id = 12,
                            Balance = 0m,
                            BranchId = 6,
                            CurrencyId = 5,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8704),
                            Name = "Лировый счет Стамбул",
                            Number = "792949TRY"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.AccountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BranchAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("JobType")
                        .HasColumnType("bool");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<string>("PayerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchAccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.HasIndex("PayerId");

                    b.ToTable("AccountHistory");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Российская Федерация, Московская область, г. Москва, Академический район, улица Винокурова 7/5, корпус 3, индекс 117449",
                            City = "Москва",
                            Code = "643",
                            Country = "Россия",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8662),
                            Email = "info@ethnologistics.asia",
                            Name = "Москва",
                            Phone = "+765165498496"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Республика Узбекистан, г. Ташкент, Юнусабадский район, улица Кашгар 11,",
                            City = "Ташкент",
                            Code = "860",
                            Country = "Узбекистан",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8664),
                            Email = "info@ethnologistics.asia",
                            Name = "Ташкент",
                            Phone = "+998984651"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Киргизия, Бишкек, Жибек-Жолу д 443/1",
                            City = "Бишкек",
                            Code = "417",
                            Country = "Киргистан",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8667),
                            Email = "info@ethnologistics.asia",
                            Name = "Бишкек",
                            Phone = "+765165498496"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Душанбе 122",
                            City = "Душанбе",
                            Code = "762",
                            Country = "Таджикистан",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8668),
                            Email = "info@ethnologistics.asia",
                            Name = "Душанбе",
                            Phone = "+665165498496"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Алматы 123",
                            City = "Алматы",
                            Code = "398",
                            Country = "Казахстан",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8670),
                            Email = "info@ethnologistics.asia",
                            Name = "Алматы",
                            Phone = "+665165498496"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Хайдарпашша",
                            City = "Стамбул",
                            Code = "792",
                            Country = "Турция",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8671),
                            Email = "info@ethnologistics.asia",
                            Name = "Стамбул",
                            Phone = "+665165498496"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("varchar");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<int>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "USD",
                            Country = "Соединенные Штаты Америки",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8377),
                            Name = "Доллар",
                            Number = 840
                        },
                        new
                        {
                            Id = 2,
                            Code = "UZS",
                            Country = "Республика Узбекистан",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8379),
                            Name = "Сум",
                            Number = 860
                        },
                        new
                        {
                            Id = 3,
                            Code = "RUB",
                            Country = "Российская Федерация",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8380),
                            Name = "Рубль",
                            Number = 643
                        },
                        new
                        {
                            Id = 4,
                            Code = "KZT",
                            Country = "Республика Казахстан",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8381),
                            Name = "Тенге",
                            Number = 398
                        },
                        new
                        {
                            Id = 5,
                            Code = "TRY",
                            Country = "Турция",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8384),
                            Name = "Лира",
                            Number = 949
                        },
                        new
                        {
                            Id = 6,
                            Code = "AED",
                            Country = "Объедененные Арабские Эмираты",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8385),
                            Name = "Дирхам",
                            Number = 784
                        },
                        new
                        {
                            Id = 7,
                            Code = "KGS",
                            Country = "Кыргызская Республика",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8386),
                            Name = "Сом",
                            Number = 417
                        },
                        new
                        {
                            Id = 8,
                            Code = "TJS",
                            Country = "Республика Таджикистан",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8387),
                            Name = "Сомони",
                            Number = 972
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExpenseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8776),
                            Description = "Зарплата",
                            Name = "Зарплата"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8777),
                            Description = "Аванс",
                            Name = "Аванс"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8778),
                            Description = "Курерам за перевозку",
                            Name = "Курерам за перевозку"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8780),
                            Description = "Обед",
                            Name = "Обед"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8781),
                            Description = "Карзи Хасана",
                            Name = "Карзи Хасана"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8782),
                            Description = "Депозит",
                            Name = "Депозит"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8783),
                            Description = "За перевозку до филиала",
                            Name = "За перевозку до филиала"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8784),
                            Description = "За доставку до получателя",
                            Name = "За доставку до получателя"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8785),
                            Description = "За забор посылки",
                            Name = "За забор посылки"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8786),
                            Description = "За выкуп",
                            Name = "За выкуп"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8787),
                            Description = "Ковертация",
                            Name = "Ковертация"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8788),
                            Description = "Перевод",
                            Name = "Перевод"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8789),
                            Description = "За мелкие расходы",
                            Name = "За мелкие расходы"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FromBranchId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<int>("ToBranchId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromBranchId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.HasIndex("ToBranchId");

                    b.ToTable("ParcelBranch");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostBuyout")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CostDeliveryToBranch")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("CostDeliveryToPoint")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("CostPickingUp")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<bool>("StateBuyout")
                        .HasColumnType("boolean");

                    b.Property<bool>("StateDeliveryToBranch")
                        .HasColumnType("boolean");

                    b.Property<bool>("StateDeliveryToPoint")
                        .HasColumnType("boolean");

                    b.Property<bool>("StatePickingUp")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.ToTable("ParcelCost");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.ToTable("ParcelDescription");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageBytes")
                        .HasColumnType("varchar");

                    b.Property<string>("ImageName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("ParcelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelImage");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cost")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ParcelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelItem");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasMaxLength(20)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CourierId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JobType")
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<bool>("PaymentState")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelJob");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelOwners", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<string>("RecepientCourierId")
                        .HasColumnType("text");

                    b.Property<string>("RecepientId")
                        .HasColumnType("text");

                    b.Property<string>("RecepientStaffId")
                        .HasColumnType("text");

                    b.Property<string>("SenderCourierId")
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<string>("SenderStaffId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.HasIndex("RecepientCourierId");

                    b.HasIndex("RecepientId");

                    b.HasIndex("RecepientStaffId");

                    b.HasIndex("SenderCourierId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SenderStaffId");

                    b.ToTable("ParcelOwners");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.HasIndex("PlanId");

                    b.ToTable("ParcelPlan");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfPoint")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasMaxLength(20)
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.ToTable("ParcelSize");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelSound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<string>("SoundBytes")
                        .HasColumnType("varchar");

                    b.Property<string>("SoundName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelSound");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.HasIndex("StatusId");

                    b.ToTable("ParcelStatus");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasMaxLength(5)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Plan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 7m,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8339),
                            Description = "Description",
                            Name = "Стандарт"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 12m,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8343),
                            Description = "Description",
                            Name = "Экспресс"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 30m,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8344),
                            Description = "Description",
                            Name = "Ультра"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 5m,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8346),
                            Description = "Description",
                            Name = "Авто"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8495),
                            Description = "Создан",
                            Name = "Создан"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8508),
                            Description = "В пути",
                            Name = "В пути"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8509),
                            Description = "Прибыл в пункт доставки",
                            Name = "Прибыл"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8510),
                            Description = "На доставке у курьера",
                            Name = "У курьера"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8511),
                            Description = "Доставлен",
                            Name = "Доставлен"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8512),
                            Description = "Выдан",
                            Name = "Выдан"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasMaxLength(20)
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserAccount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8727),
                            Name = "Валютный счет",
                            Number = "30a8f9cc-840USD",
                            UserId = "30a8f9cc-8d37-4d93-ab2f-774428387e4a"
                        },
                        new
                        {
                            Id = 2,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8729),
                            Name = "Валютный счет",
                            Number = "cadaa51d-840USD",
                            UserId = "cadaa51d-ddb3-4564-a8c5-79e80c98a032"
                        },
                        new
                        {
                            Id = 3,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8731),
                            Name = "Валютный счет",
                            Number = "5a6f1681-840USD",
                            UserId = "5a6f1681-c582-46f5-905b-4eb2c222dcf5"
                        },
                        new
                        {
                            Id = 4,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8732),
                            Name = "Валютный счет",
                            Number = "3b9d7f21-840USD",
                            UserId = "3b9d7f21-1d66-4c98-8648-64a68777bccb"
                        },
                        new
                        {
                            Id = 5,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8733),
                            Name = "Валютный счет",
                            Number = "0a1e5c27-840USD",
                            UserId = "0a1e5c27-0b09-4f60-a9c3-8618791a8672"
                        },
                        new
                        {
                            Id = 6,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 311, DateTimeKind.Local).AddTicks(8734),
                            Name = "Валютный счет",
                            Number = "e13b576b-840USD",
                            UserId = "e13b576b-afbe-4b4c-aaad-64fd9bee3852"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("JobType")
                        .HasColumnType("bool");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccountHistory");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiryDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "b78116c3-11d9-484c-b902-896a53fa6fe5",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "68373a2b-932e-4fff-a7a9-b31e156d4101",
                            ConcurrencyStamp = "00f37758-d12e-4706-928b-8f88a501745b",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "5919c97a-b888-4858-bbbe-0123a1952624",
                            ConcurrencyStamp = "a3477b20-80ad-4983-b32a-1fea3a04c8a8",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "401bc2e9-3a0b-4281-9685-d6b36fc37d31",
                            ConcurrencyStamp = "76b8e705-d258-4dcd-868e-76e72227401d",
                            Name = "Courier",
                            NormalizedName = "COURIER"
                        },
                        new
                        {
                            Id = "336b1b38-f4c9-4844-8dcb-b59a0d7f0533",
                            ConcurrencyStamp = "900de5e5-2fc9-4408-ba34-5df4fa2bd94b",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("ParcelJobId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserNameT")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ParcelJobId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "30a8f9cc-8d37-4d93-ab2f-774428387e4a",
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "10f0a47d-d947-4ba1-b5ba-a0cba39bfe51",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8003),
                            Email = "administrator@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDSystem",
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "998970000675",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82c6526a-149e-4860-8dc1-a6c07457eb7b",
                            TwoFactorEnabled = false,
                            UserName = "administrator",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "cadaa51d-ddb3-4564-a8c5-79e80c98a032",
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "8847ac0c-c6df-431f-9488-991f7049b978",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8026),
                            Email = "hayrulloh@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Hayrulloh",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAYRULLOH@GMAIL.COM",
                            NormalizedUserName = "HAYRULLOH",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "998935788886",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a872252-a5bd-44bb-87fc-a84a71effba3",
                            TwoFactorEnabled = false,
                            UserName = "hayrulloh",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "5a6f1681-c582-46f5-905b-4eb2c222dcf5",
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "6ba9f07a-bde3-43b6-9e40-d0d04bd94eff",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8035),
                            Email = "Nodir@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Nodir",
                            LockoutEnabled = false,
                            NormalizedEmail = "NODIR@GMAIL.COM",
                            NormalizedUserName = "NODIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "998909046605",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11b2a014-744a-43a1-8ed7-b221823b4697",
                            TwoFactorEnabled = false,
                            UserName = "nodir",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "3b9d7f21-1d66-4c98-8648-64a68777bccb",
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "25bcd5cb-7701-4db8-a14d-825a6caf2884",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8042),
                            Email = "Javohir@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Javohir",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAVOHIR@GMAIL.COM",
                            NormalizedUserName = "JAVOHIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "998931710966",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33d48f21-ebd5-4a27-9a3a-b4c58afa7740",
                            TwoFactorEnabled = false,
                            UserName = "javohir",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "0a1e5c27-0b09-4f60-a9c3-8618791a8672",
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "4dc3ba8f-b10a-405f-8849-6e60f4a84f45",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8049),
                            Email = "Ismoil@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Ismoil",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISMOIL@GMAIL.COM",
                            NormalizedUserName = "ISMOIL",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "998977093262",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de9bbbe1-4263-47cc-9dfd-4d4ca1cd80ad",
                            TwoFactorEnabled = false,
                            UserName = "ismoil",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "e13b576b-afbe-4b4c-aaad-64fd9bee3852",
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "0235589c-cd85-48a5-8bcc-54520a5061cf",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8058),
                            Email = "Sadulla@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Sadulla",
                            LockoutEnabled = false,
                            NormalizedEmail = "SADULLA@GMAIL.COM",
                            NormalizedUserName = "SADULLA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "998994885995",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72a970f1-235c-4d86-9752-99fd1a424789",
                            TwoFactorEnabled = false,
                            UserName = "sadulla",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "34a0eb9b-6797-40f7-a84c-aa31cdd4cdc6",
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "91855aa5-b3f9-4dee-9d30-771f29a65a46",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8065),
                            Email = "Ubaydulla@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Ubaydulla",
                            LockoutEnabled = false,
                            NormalizedEmail = "UBAYDULLA@GMAIL.COM",
                            NormalizedUserName = "UBAYDULLA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "998990500033",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b556a10-0876-4174-b036-5eb0e8ec3c5f",
                            TwoFactorEnabled = false,
                            UserName = "ubaydulla",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "131d5dd1-6bf1-4f52-be90-00815000fb57",
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "679ab848-65ad-43c9-a1d6-9d6bdefd88db",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8071),
                            Email = "Khikmatillo@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Khikmatillo",
                            LockoutEnabled = false,
                            NormalizedEmail = "KHIKMATILLO@GMAIL.COM",
                            NormalizedUserName = "KHIKMATILLO",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "998974468090",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ca5e2b1-98a3-4115-8969-703c0534afb3",
                            TwoFactorEnabled = false,
                            UserName = "khikmatillo",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "221c0048-08c9-4e72-8f5c-ddf4039f9488",
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "070c4151-d94e-4f08-805a-24a7a9790fb4",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8079),
                            Email = "Abbos@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Abbos",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABBOS@GMAIL.COM",
                            NormalizedUserName = "ABBOS",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "998903550022",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25bc8988-3e39-4037-a765-fcaf30ec9324",
                            TwoFactorEnabled = false,
                            UserName = "abbos",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "e0c3bef9-fd70-421e-b07b-055c38b6d77c",
                            AccessFailedCount = 0,
                            Address = "Российская Федерация, Московская область, г. Москва, Академический район, улица Винокурова 7/5, корпус 3, индекс 117449",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "a88abf9c-2538-4df0-ad2a-7d0398e8de3d",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8086),
                            Email = "Shohruh@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDMoscow",
                            LastName = "Shohruh",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHOHRUH@GMAIL.COM",
                            NormalizedUserName = "SHOHRUH",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "79060470085",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb3afab8-4ee5-42ab-8354-64d27033c25c",
                            TwoFactorEnabled = false,
                            UserName = "shohruh",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "4ff7819d-8e17-4aa8-a0da-964c2db21591",
                            AccessFailedCount = 0,
                            Address = "Российская Федерация, Московская область, г. Москва, Академический район, улица Винокурова 7/5, корпус 3, индекс 117449",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "ff58b480-a157-4a17-8f16-345457e4def5",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8095),
                            Email = "Ulugbek@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDMoscow",
                            LastName = "Ulugbek",
                            LockoutEnabled = false,
                            NormalizedEmail = "ULUGBEK@GMAIL.COM",
                            NormalizedUserName = "ULUGBEK",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "79777403487",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca31b94e-ca41-47fa-be8e-05755f8eee75",
                            TwoFactorEnabled = false,
                            UserName = "ulugbek",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "92db214d-cd73-4fbc-8b34-1dc0709ba0b2",
                            AccessFailedCount = 0,
                            Address = "Российская Федерация, Московская область, г. Москва, Академический район, улица Винокурова 7/5, корпус 3, индекс 117449",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "af435553-e30f-46a9-bb2b-3d0a946d5a94",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8101),
                            Email = "Abdulaziz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDMoscow",
                            LastName = "Abdulaziz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABDULAZIZ@GMAIL.COM",
                            NormalizedUserName = "ABDULAZIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "79691799000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2381ef44-10c9-479f-9b86-c048d4dd1c41",
                            TwoFactorEnabled = false,
                            UserName = "abdulaziz",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "9c57fadd-110a-4b45-aa89-69aa141564c6",
                            AccessFailedCount = 0,
                            Address = "Российская Федерация, Московская область, г. Москва, Академический район, улица Винокурова 7/5, корпус 3, индекс 117449",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "cf8dcab0-9be2-4131-a4e0-281d710da1bc",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8108),
                            Email = "Doniyor@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDMoscow",
                            LastName = "Doniyor",
                            LockoutEnabled = false,
                            NormalizedEmail = "DONIYOR@GMAIL.COM",
                            NormalizedUserName = "DONIYOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "79777601654",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38b2474a-9891-4778-9990-cf9c779d6ddf",
                            TwoFactorEnabled = false,
                            UserName = "doniyor",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "eb6a85b0-a7fb-4f8e-9bea-03825e6f020f",
                            AccessFailedCount = 0,
                            Address = "Российская Федерация, Московская область, г. Москва, Академический район, улица Винокурова 7/5, корпус 3, индекс 117449",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "3abe7d58-5dd3-4ab9-89b6-31ac025c1aa5",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8186),
                            Email = "Shaxzod@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDMoscow",
                            LastName = "Shaxzod",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAXZOD@GMAIL.COM",
                            NormalizedUserName = "SHAXZOD",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "79163870009",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ebb30ea4-81ac-4f92-a7f3-51acaf63468d",
                            TwoFactorEnabled = false,
                            UserName = "shaxzod",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "11fafeb4-c7c1-463c-bb1e-55203e68dfdf",
                            AccessFailedCount = 0,
                            Address = "Российская Федерация, Московская область, г. Москва, Академический район, улица Винокурова 7/5, корпус 3, индекс 117449",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "90624d9b-aa72-48eb-ae91-187ce68146d2",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8194),
                            Email = "Umar@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDMoscow",
                            LastName = "Umar",
                            LockoutEnabled = false,
                            NormalizedEmail = "UMAR@GMAIL.COM",
                            NormalizedUserName = "UMAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "79963321030",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29a59dbf-02ff-4e55-939f-fea710e93cd9",
                            TwoFactorEnabled = false,
                            UserName = "umar",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = "92b7c777-0d3e-4026-844f-20164bb0f97e",
                            AccessFailedCount = 0,
                            Address = "Российская Федерация, Московская область, г. Москва, Академический район, улица Винокурова 7/5, корпус 3, индекс 117449",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "3dd44643-50b8-4748-870b-beb00462a781",
                            DateCreated = new DateTime(2023, 1, 4, 13, 4, 50, 371, DateTimeKind.Local).AddTicks(8200),
                            Email = "Abror@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDMoscow",
                            LastName = "Abror",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABROR@GMAIL.COM",
                            NormalizedUserName = "ABROR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuYFUUOTZ01KYaRl/wNdeERuWD1OsU3wDmdUrmpZHcmAA+Pzp/y3N8yW6zU4RmADA==",
                            PhoneNumber = "79296800899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a239918-aa15-4b65-a3fc-bdf6d907f471",
                            TwoFactorEnabled = false,
                            UserName = "abror",
                            UserNameT = "UserName"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "30a8f9cc-8d37-4d93-ab2f-774428387e4a",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        },
                        new
                        {
                            UserId = "cadaa51d-ddb3-4564-a8c5-79e80c98a032",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "5a6f1681-c582-46f5-905b-4eb2c222dcf5",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "3b9d7f21-1d66-4c98-8648-64a68777bccb",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "0a1e5c27-0b09-4f60-a9c3-8618791a8672",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "e13b576b-afbe-4b4c-aaad-64fd9bee3852",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "34a0eb9b-6797-40f7-a84c-aa31cdd4cdc6",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "131d5dd1-6bf1-4f52-be90-00815000fb57",
                            RoleId = "68373a2b-932e-4fff-a7a9-b31e156d4101"
                        },
                        new
                        {
                            UserId = "221c0048-08c9-4e72-8f5c-ddf4039f9488",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "e0c3bef9-fd70-421e-b07b-055c38b6d77c",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "4ff7819d-8e17-4aa8-a0da-964c2db21591",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "92db214d-cd73-4fbc-8b34-1dc0709ba0b2",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "9c57fadd-110a-4b45-aa89-69aa141564c6",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "eb6a85b0-a7fb-4f8e-9bea-03825e6f020f",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        },
                        new
                        {
                            UserId = "11fafeb4-c7c1-463c-bb1e-55203e68dfdf",
                            RoleId = "68373a2b-932e-4fff-a7a9-b31e156d4101"
                        },
                        new
                        {
                            UserId = "92b7c777-0d3e-4026-844f-20164bb0f97e",
                            RoleId = "401bc2e9-3a0b-4281-9685-d6b36fc37d31"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.IdentityUserEntities.Tokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("TokenId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EDSystems.Domain.IdentityUserEntities.UserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.HasDiscriminator().HasValue("UserClaim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "CanAddBranch",
                            ClaimValue = "CanAddBranch",
                            UserId = "30a8f9cc-8d37-4d93-ab2f-774428387e4a"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Manager",
                            ClaimValue = "CanOnlyRead",
                            UserId = "cadaa51d-ddb3-4564-a8c5-79e80c98a032"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Account", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.AccountHistory", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Account", "BranchAccount")
                        .WithMany("AccountHistory")
                        .HasForeignKey("BranchAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "Payer")
                        .WithMany()
                        .HasForeignKey("PayerId");

                    b.Navigation("BranchAccount");

                    b.Navigation("Currency");

                    b.Navigation("Parcel");

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelBranch", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Branch", "FromBranch")
                        .WithMany()
                        .HasForeignKey("FromBranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelBranch")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelBranch", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Branch", "ToBranch")
                        .WithMany()
                        .HasForeignKey("ToBranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("FromBranch");

                    b.Navigation("Parcel");

                    b.Navigation("ToBranch");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelCost", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelCost")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelCost", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelDescription", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelDescription")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelDescription", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelImage", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany("ParcelImage")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelItem", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany("ParcelItem")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Currency");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelJob", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelOwners", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelOwners")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelOwners", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "RecepientCourier")
                        .WithMany()
                        .HasForeignKey("RecepientCourierId");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "Recepient")
                        .WithMany()
                        .HasForeignKey("RecepientId");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "RecepientStaff")
                        .WithMany()
                        .HasForeignKey("RecepientStaffId");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "SenderCourier")
                        .WithMany()
                        .HasForeignKey("SenderCourierId");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "SenderStaff")
                        .WithMany()
                        .HasForeignKey("SenderStaffId");

                    b.Navigation("Parcel");

                    b.Navigation("Recepient");

                    b.Navigation("RecepientCourier");

                    b.Navigation("RecepientStaff");

                    b.Navigation("Sender");

                    b.Navigation("SenderCourier");

                    b.Navigation("SenderStaff");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelPlan", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelPlan")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelPlan", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Parcel");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelSize", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelSize")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelSize", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelSound", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany("ParcelSound")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelStatus", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany("ParcelStatus")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EDSystems.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parcel");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccountHistory", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("UserAccountHistory")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Currency");

                    b.Navigation("Parcel");

                    b.Navigation("User");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.User", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.ParcelJob", null)
                        .WithMany("Courier")
                        .HasForeignKey("ParcelJobId");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.UserRole", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountHistory");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Parcel", b =>
                {
                    b.Navigation("ParcelBranch");

                    b.Navigation("ParcelCost");

                    b.Navigation("ParcelDescription");

                    b.Navigation("ParcelImage");

                    b.Navigation("ParcelItem");

                    b.Navigation("ParcelOwners");

                    b.Navigation("ParcelPlan");

                    b.Navigation("ParcelSize");

                    b.Navigation("ParcelSound");

                    b.Navigation("ParcelStatus");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelJob", b =>
                {
                    b.Navigation("Courier");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("UserAccountHistory");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

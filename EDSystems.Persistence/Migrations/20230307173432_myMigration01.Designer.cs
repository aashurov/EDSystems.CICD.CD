// <auto-generated />
using System;
using EDSystems.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EDSystems.Persistence.Migrations
{
    [DbContext(typeof(EDSystemsDbContext))]
    [Migration("20230307173432_myMigration01")]
    partial class myMigration01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EDSystems.Domain.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(180),
                            Name = "Валютный счет Москвы",
                            Number = "643840USD"
                        },
                        new
                        {
                            Id = 2,
                            Balance = 0m,
                            BranchId = 1,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(180),
                            Name = "Рублевый счет Москвы",
                            Number = "643643RUB"
                        },
                        new
                        {
                            Id = 3,
                            Balance = 0m,
                            BranchId = 2,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(180),
                            Name = "Валютный счет Ташкента",
                            Number = "860840USD"
                        },
                        new
                        {
                            Id = 4,
                            Balance = 0m,
                            BranchId = 2,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(180),
                            Name = "Рублевый счет Ташкента",
                            Number = "860643RUB"
                        },
                        new
                        {
                            Id = 5,
                            Balance = 0m,
                            BranchId = 3,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(180),
                            Name = "Валютный счет Бишкека",
                            Number = "417840USD"
                        },
                        new
                        {
                            Id = 6,
                            Balance = 0m,
                            BranchId = 3,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(190),
                            Name = "Рублевый счет Бишкека",
                            Number = "417643RUB"
                        },
                        new
                        {
                            Id = 7,
                            Balance = 0m,
                            BranchId = 4,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(190),
                            Name = "Валютный счет Душанбе",
                            Number = "972840USD"
                        },
                        new
                        {
                            Id = 8,
                            Balance = 0m,
                            BranchId = 4,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(190),
                            Name = "Рублевый счет Душанбе",
                            Number = "972843RUB"
                        },
                        new
                        {
                            Id = 9,
                            Balance = 0m,
                            BranchId = 5,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(200),
                            Name = "Валютный счет Алматы",
                            Number = "398840USD"
                        },
                        new
                        {
                            Id = 10,
                            Balance = 0m,
                            BranchId = 5,
                            CurrencyId = 2,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(200),
                            Name = "Рублевый счет Алматы",
                            Number = "398643RUB"
                        },
                        new
                        {
                            Id = 11,
                            Balance = 0m,
                            BranchId = 6,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(200),
                            Name = "Валютный счет Стамбул",
                            Number = "792840USD"
                        },
                        new
                        {
                            Id = 12,
                            Balance = 0m,
                            BranchId = 6,
                            CurrencyId = 5,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(200),
                            Name = "Лировый счет Стамбул",
                            Number = "792949TRY"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.AccountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BranchAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("JobType")
                        .HasColumnType("bool");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<string>("PayerId")
                        .HasColumnType("text");

                    b.Property<int?>("PayerId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchAccountId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.HasIndex("PayerId1");

                    b.ToTable("AccountHistory");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Branch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Российская Федерация, Московская область, г. Москва, Академический район, улица Винокурова 7/5, корпус 3, индекс 117449",
                            City = "Москва",
                            Code = "643",
                            Country = "Россия",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(150),
                            Email = "info@ethnologistics.asia",
                            Name = "Москва",
                            Phone = "+765165498496"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Республика Узбекистан, г. Ташкент, Юнусабадский район, улица Кашгар 11,",
                            City = "Ташкент",
                            Code = "860",
                            Country = "Узбекистан",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(150),
                            Email = "info@ethnologistics.asia",
                            Name = "Ташкент",
                            Phone = "+998984651"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Киргизия, Бишкек, Жибек-Жолу д 443/1",
                            City = "Бишкек",
                            Code = "417",
                            Country = "Киргистан",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(150),
                            Email = "info@ethnologistics.asia",
                            Name = "Бишкек",
                            Phone = "+765165498496"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Душанбе 122",
                            City = "Душанбе",
                            Code = "762",
                            Country = "Таджикистан",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(160),
                            Email = "info@ethnologistics.asia",
                            Name = "Душанбе",
                            Phone = "+665165498496"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Алматы 123",
                            City = "Алматы",
                            Code = "398",
                            Country = "Казахстан",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(160),
                            Email = "info@ethnologistics.asia",
                            Name = "Алматы",
                            Phone = "+665165498496"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Хайдарпашша",
                            City = "Стамбул",
                            Code = "792",
                            Country = "Турция",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(160),
                            Email = "info@ethnologistics.asia",
                            Name = "Стамбул",
                            Phone = "+665165498496"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("varchar");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<int>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "USD",
                            Country = "Соединенные Штаты Америки",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1420),
                            Name = "Доллар",
                            Number = 840
                        },
                        new
                        {
                            Id = 2,
                            Code = "UZS",
                            Country = "Республика Узбекистан",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1420),
                            Name = "Сум",
                            Number = 860
                        },
                        new
                        {
                            Id = 3,
                            Code = "RUB",
                            Country = "Российская Федерация",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1420),
                            Name = "Рубль",
                            Number = 643
                        },
                        new
                        {
                            Id = 4,
                            Code = "KZT",
                            Country = "Республика Казахстан",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1420),
                            Name = "Тенге",
                            Number = 398
                        },
                        new
                        {
                            Id = 5,
                            Code = "TRY",
                            Country = "Турция",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1430),
                            Name = "Лира",
                            Number = 949
                        },
                        new
                        {
                            Id = 6,
                            Code = "AED",
                            Country = "Объедененные Арабские Эмираты",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1430),
                            Name = "Дирхам",
                            Number = 784
                        },
                        new
                        {
                            Id = 7,
                            Code = "KGS",
                            Country = "Кыргызская Республика",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1430),
                            Name = "Сом",
                            Number = 417
                        },
                        new
                        {
                            Id = 8,
                            Code = "TJS",
                            Country = "Республика Таджикистан",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1430),
                            Name = "Сомони",
                            Number = 972
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExpenseType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(240),
                            Description = "Зарплата",
                            Name = "Зарплата"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(240),
                            Description = "Аванс",
                            Name = "Аванс"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(250),
                            Description = "Курерам за перевозку",
                            Name = "Курерам за перевозку"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(250),
                            Description = "Обед",
                            Name = "Обед"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(250),
                            Description = "Карзи Хасана",
                            Name = "Карзи Хасана"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(250),
                            Description = "Депозит",
                            Name = "Депозит"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(250),
                            Description = "За перевозку до филиала",
                            Name = "За перевозку до филиала"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(260),
                            Description = "За доставку до получателя",
                            Name = "За доставку до получателя"
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(260),
                            Description = "За забор посылки",
                            Name = "За забор посылки"
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(260),
                            Description = "За выкуп",
                            Name = "За выкуп"
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(260),
                            Description = "Ковертация",
                            Name = "Ковертация"
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(260),
                            Description = "Перевод",
                            Name = "Перевод"
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(260),
                            Description = "За мелкие расходы",
                            Name = "За мелкие расходы"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FromBranchId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<int>("ToBranchId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromBranchId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.HasIndex("ToBranchId");

                    b.ToTable("ParcelBranch");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostBuyout")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CostDeliveryToBranch")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("CostDeliveryToPoint")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("CostPickingUp")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<bool>("StateBuyout")
                        .HasColumnType("boolean");

                    b.Property<bool>("StateDeliveryToBranch")
                        .HasColumnType("boolean");

                    b.Property<bool>("StateDeliveryToPoint")
                        .HasColumnType("boolean");

                    b.Property<bool>("StatePickingUp")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.ToTable("ParcelCost");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.ToTable("ParcelDescription");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageBytes")
                        .HasColumnType("varchar");

                    b.Property<string>("ImageName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("ParcelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelImage");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cost")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ParcelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelItem");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasMaxLength(20)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CourierId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JobType")
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<bool>("PaymentState")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelJob");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelOwners", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<string>("RecepientCourierId")
                        .HasColumnType("text");

                    b.Property<int?>("RecepientCourierId1")
                        .HasColumnType("integer");

                    b.Property<string>("RecepientId")
                        .HasColumnType("text");

                    b.Property<int?>("RecepientId1")
                        .HasColumnType("integer");

                    b.Property<string>("RecepientStaffId")
                        .HasColumnType("text");

                    b.Property<int?>("RecepientStaffId1")
                        .HasColumnType("integer");

                    b.Property<string>("SenderCourierId")
                        .HasColumnType("text");

                    b.Property<int?>("SenderCourierId1")
                        .HasColumnType("integer");

                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<int?>("SenderId1")
                        .HasColumnType("integer");

                    b.Property<string>("SenderStaffId")
                        .HasColumnType("text");

                    b.Property<int?>("SenderStaffId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.HasIndex("RecepientCourierId1");

                    b.HasIndex("RecepientId1");

                    b.HasIndex("RecepientStaffId1");

                    b.HasIndex("SenderCourierId1");

                    b.HasIndex("SenderId1");

                    b.HasIndex("SenderStaffId1");

                    b.ToTable("ParcelOwners");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.HasIndex("PlanId");

                    b.ToTable("ParcelPlan");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfPoint")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasMaxLength(20)
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId")
                        .IsUnique();

                    b.ToTable("ParcelSize");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelSound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<string>("SoundBytes")
                        .HasColumnType("varchar");

                    b.Property<string>("SoundName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.ToTable("ParcelSound");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int?>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.HasIndex("StatusId");

                    b.ToTable("ParcelStatus");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasMaxLength(5)
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Plan");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 7m,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1400),
                            Description = "Description",
                            Name = "Стандарт"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 12m,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1400),
                            Description = "Description",
                            Name = "Экспресс"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 30m,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1400),
                            Description = "Description",
                            Name = "Ультра"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 5m,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1410),
                            Description = "Description",
                            Name = "Авто"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(20),
                            Description = "Создан",
                            Name = "Создан"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(60),
                            Description = "В пути",
                            Name = "В пути"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(60),
                            Description = "Прибыл в пункт доставки",
                            Name = "Прибыл"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(70),
                            Description = "На доставке у курьера",
                            Name = "У курьера"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(70),
                            Description = "Доставлен",
                            Name = "Доставлен"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(70),
                            Description = "Выдан",
                            Name = "Выдан"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasMaxLength(20)
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("Number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("UserAccount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(220),
                            Name = "Валютный счет",
                            Number = "30a8f9cc-840USD",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(220),
                            Name = "Валютный счет",
                            Number = "cadaa51d-840USD",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(220),
                            Name = "Валютный счет",
                            Number = "5a6f1681-840USD",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(230),
                            Name = "Валютный счет",
                            Number = "3b9d7f21-840USD",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 5,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(230),
                            Name = "Валютный счет",
                            Number = "0a1e5c27-840USD",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 6,
                            Balance = 0m,
                            CurrencyId = 1,
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 786, DateTimeKind.Local).AddTicks(230),
                            Name = "Валютный счет",
                            Number = "e13b576b-840USD",
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("JobType")
                        .HasColumnType("bool");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ParcelId")
                        .HasColumnType("integer");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParcelId");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserAccountHistory");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiryDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "62d65bae-26fe-4478-8c5a-028912ed52f8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "745a2a87-3eec-4831-9648-ff3e0ca27f5f",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "ca38d0cc-67c2-4fcb-83fa-9ecdd0ee6130",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "18be39b6-69fa-4303-acb2-13c9ad627d6e",
                            Name = "Courier",
                            NormalizedName = "COURIER"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "3072d295-e268-445f-9aae-2c5c58501d87",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("ParcelJobId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UserNameT")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ParcelJobId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "537ead06-91c5-4e77-9d74-8a4c24c98c0c",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1260),
                            Email = "administrator@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDSystem",
                            LastName = "Administrator",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEG96UZInZlqlB7GEfsljsHadi+M+gyuEt9ueoxFf/3f3wCIWCDN9c+bQaOWsM8M05A==",
                            PhoneNumber = "998970000675",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "administrator",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "4d518d26-2c13-460b-b918-30d018a73dce",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1270),
                            Email = "hayrulloh@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Hayrulloh",
                            LockoutEnabled = false,
                            NormalizedEmail = "HAYRULLOH@GMAIL.COM",
                            NormalizedUserName = "HAYRULLOH",
                            PasswordHash = "AQAAAAIAAYagAAAAEG96UZInZlqlB7GEfsljsHadi+M+gyuEt9ueoxFf/3f3wCIWCDN9c+bQaOWsM8M05A==",
                            PhoneNumber = "998935788886",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "hayrulloh",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "99484c3d-c5a9-40b4-996f-43b88d4fd06e",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1280),
                            Email = "Nodir@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Nodir",
                            LockoutEnabled = false,
                            NormalizedEmail = "NODIR@GMAIL.COM",
                            NormalizedUserName = "NODIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEG96UZInZlqlB7GEfsljsHadi+M+gyuEt9ueoxFf/3f3wCIWCDN9c+bQaOWsM8M05A==",
                            PhoneNumber = "998909046605",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nodir",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "7dfa1f3d-3dfb-4990-b102-f2254a385477",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1310),
                            Email = "Javohir@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Javohir",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAVOHIR@GMAIL.COM",
                            NormalizedUserName = "JAVOHIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEG96UZInZlqlB7GEfsljsHadi+M+gyuEt9ueoxFf/3f3wCIWCDN9c+bQaOWsM8M05A==",
                            PhoneNumber = "998931710966",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "javohir",
                            UserNameT = "UserName"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "Республика Узбекистан, г. Ташкент, Кашгар 11, 100099",
                            ChatId = -1001663331836L,
                            ConcurrencyStamp = "97a5ddd0-0a30-4208-af4d-79f82fe2dbcd",
                            DateCreated = new DateTime(2023, 3, 7, 22, 34, 32, 818, DateTimeKind.Local).AddTicks(1320),
                            Email = "Ismoil@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "EDTashkent",
                            LastName = "Ismoil",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISMOIL@GMAIL.COM",
                            NormalizedUserName = "ISMOIL",
                            PasswordHash = "AQAAAAIAAYagAAAAEG96UZInZlqlB7GEfsljsHadi+M+gyuEt9ueoxFf/3f3wCIWCDN9c+bQaOWsM8M05A==",
                            PhoneNumber = "998977093262",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "ismoil",
                            UserNameT = "UserName"
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.IdentityUserEntities.Tokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("TokenId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("EDSystems.Domain.IdentityUserEntities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "CanGetAllBranches",
                            ClaimValue = "CanGetAllBranches",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "CanGetAllBranchesWithPagination",
                            ClaimValue = "CanGetAllBranchesWithPagination",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "CanGetBranchDetails",
                            ClaimValue = "CanGetBranchDetails",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "CanCreateBranch",
                            ClaimValue = "CanCreateBranch",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "CanUpdateBranch",
                            ClaimValue = "CanUpdateBranch",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "CanDeleteBranch",
                            ClaimValue = "CanDeleteBranch",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "CanDeleteBranches",
                            ClaimValue = "CanDeleteBranches",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "CanGetAllPlans",
                            ClaimValue = "CanGetAllPlans",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "CanGetAllPlansWithPagination",
                            ClaimValue = "CanGetAllPlansWithPagination",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "CanGetPlanDetails",
                            ClaimValue = "CanGetPlanDetails",
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "CanCreatePlan",
                            ClaimValue = "CanCreatePlan",
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "CanUpdatePlan",
                            ClaimValue = "CanUpdatePlan",
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "CanDeletePlan",
                            ClaimValue = "CanDeletePlan",
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "CanDeletePlans",
                            ClaimValue = "CanDeletePlans",
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "CanGetAllStatuses",
                            ClaimValue = "CanGetAllStatuses",
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "CanGetAllStatusesWithPagination",
                            ClaimValue = "CanGetAllStatusesWithPagination",
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "CanGetStatusDetails",
                            ClaimValue = "CanGetStatusDetails",
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "CanCreateStatus",
                            ClaimValue = "CanCreateStatus",
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "CanUpdateStatus",
                            ClaimValue = "CanUpdateStatus",
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "CanDeleteStatus",
                            ClaimValue = "CanDeleteStatus",
                            UserId = 1
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "CanDeleteStatuses",
                            ClaimValue = "CanDeleteStatuses",
                            UserId = 1
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "CanGetAllParcels",
                            ClaimValue = "CanGetAllParcels",
                            UserId = 1
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "CanGetAllParcelsWithPagination",
                            ClaimValue = "CanGetAllParcelsWithPagination",
                            UserId = 1
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "CanGetParcelDetails",
                            ClaimValue = "CanGetParcelDetails",
                            UserId = 1
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "CanCreateParcel",
                            ClaimValue = "CanCreateParcel",
                            UserId = 1
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "CanUpdateParcel",
                            ClaimValue = "CanUpdateParcel",
                            UserId = 1
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "CanDeleteParcel",
                            ClaimValue = "CanDeleteParcel",
                            UserId = 1
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "CanDeleteParcels",
                            ClaimValue = "CanDeleteParcels",
                            UserId = 1
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "CanGetAllUsers",
                            ClaimValue = "CanGetAllUsers",
                            UserId = 1
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "CanGetAllUsersWithPagination",
                            ClaimValue = "CanGetAllUsersWithPagination",
                            UserId = 1
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "CanGetUserDetails",
                            ClaimValue = "CanGetUserDetails",
                            UserId = 1
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "CanCreateUser",
                            ClaimValue = "CanCreateUser",
                            UserId = 1
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "CanUpdateUser",
                            ClaimValue = "CanUpdateUser",
                            UserId = 1
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "CanDeleteUser",
                            ClaimValue = "CanDeleteUser",
                            UserId = 1
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "CanDeleteUsers",
                            ClaimValue = "CanDeleteUsers",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("EDSystems.Domain.IdentityUserEntities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Account", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.AccountHistory", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Account", "BranchAccount")
                        .WithMany("AccountHistory")
                        .HasForeignKey("BranchAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "Payer")
                        .WithMany()
                        .HasForeignKey("PayerId1");

                    b.Navigation("BranchAccount");

                    b.Navigation("Currency");

                    b.Navigation("Parcel");

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelBranch", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Branch", "FromBranch")
                        .WithMany()
                        .HasForeignKey("FromBranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelBranch")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelBranch", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Branch", "ToBranch")
                        .WithMany()
                        .HasForeignKey("ToBranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("FromBranch");

                    b.Navigation("Parcel");

                    b.Navigation("ToBranch");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelCost", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelCost")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelCost", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelDescription", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelDescription")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelDescription", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelImage", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany("ParcelImage")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelItem", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany("ParcelItem")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Currency");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelJob", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelOwners", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelOwners")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelOwners", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "RecepientCourier")
                        .WithMany()
                        .HasForeignKey("RecepientCourierId1");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "Recepient")
                        .WithMany()
                        .HasForeignKey("RecepientId1");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "RecepientStaff")
                        .WithMany()
                        .HasForeignKey("RecepientStaffId1");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "SenderCourier")
                        .WithMany()
                        .HasForeignKey("SenderCourierId1");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId1");

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "SenderStaff")
                        .WithMany()
                        .HasForeignKey("SenderStaffId1");

                    b.Navigation("Parcel");

                    b.Navigation("Recepient");

                    b.Navigation("RecepientCourier");

                    b.Navigation("RecepientStaff");

                    b.Navigation("Sender");

                    b.Navigation("SenderCourier");

                    b.Navigation("SenderStaff");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelPlan", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelPlan")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelPlan", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Parcel");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelSize", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithOne("ParcelSize")
                        .HasForeignKey("EDSystems.Domain.Entities.ParcelSize", "ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelSound", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany("ParcelSound")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelStatus", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany("ParcelStatus")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EDSystems.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parcel");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccount", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccountHistory", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.Parcel", "Parcel")
                        .WithMany()
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("UserAccountHistory")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Currency");

                    b.Navigation("Parcel");

                    b.Navigation("User");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.User", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.ParcelJob", null)
                        .WithMany("Courier")
                        .HasForeignKey("ParcelJobId");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.UserRole", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EDSystems.Domain.IdentityUserEntities.UserClaim", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSystems.Domain.IdentityUserEntities.UserLogin", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EDSystems.Domain.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Account", b =>
                {
                    b.Navigation("AccountHistory");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.Parcel", b =>
                {
                    b.Navigation("ParcelBranch");

                    b.Navigation("ParcelCost");

                    b.Navigation("ParcelDescription");

                    b.Navigation("ParcelImage");

                    b.Navigation("ParcelItem");

                    b.Navigation("ParcelOwners");

                    b.Navigation("ParcelPlan");

                    b.Navigation("ParcelSize");

                    b.Navigation("ParcelSound");

                    b.Navigation("ParcelStatus");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.ParcelJob", b =>
                {
                    b.Navigation("Courier");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserAccount", b =>
                {
                    b.Navigation("UserAccountHistory");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EDSystems.Domain.Entities.UserEntities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
